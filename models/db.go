package models

import (
	"encoding/json"
	"errors"
	"io/ioutil"

	"github.com/go-redis/redis"
)

// NewRedisDB instantiates a package-level redis client access
func NewRedisDB() error {
	client = redis.NewClient(&redis.Options{
		Addr: "localhost:6379",
	}) // fuuuuck
	return MigrateQuestions(client, "private/questions.json")
}

var (
	redisNil = redis.Nil

	// ErrUserNotFound common error on login form when the user is not found
	ErrUserNotFound = errors.New("user not found")

	// ErrInvalidLogin common error on login form when the user does not match its login credentials
	ErrInvalidLogin = errors.New("invalid login")

	// ErrUsernameTaken common error on registration form when the username already existed
	ErrUsernameTaken = errors.New("username taken")

	// ErrQuestionDuplicate specific error on whether the question has already been asked
	ErrQuestionDuplicate = errors.New("question already existed")

	// ErrEmptyUserQuestion specific error for capturing uninitialized array error
	ErrEmptyUserQuestion = errors.New("user has no question")

	// ErrTypeMismatch specific error for capturing type mismatch
	ErrTypeMismatch = errors.New("the type didn't match")

	// client is a redis client shadow, make sure this is not null, if you use this
	// FIXME: this must not be roaming at a package level
	client *redis.Client // fuuuuck// fuuuuck// fuuuuck// fuuuuck

	// ErrNilClient gives error message when redis client variable is nil
	ErrNilClient = errors.New("client is nil")

	// ErrUserInLobby gives error message when user attempts to join a lobby when is already in lobby
	ErrUserInLobby = errors.New("user is currently joined in to a lobby")

	// ErrUserNotInLobby gives error message when user attempts to get its current lobby when is not in lobby
	ErrUserNotInLobby = errors.New("user is currently not joined in to a lobby")

	// ErrLobbyEmptyMembers gives error message when the lobby has no members
	ErrLobbyEmptyMembers = errors.New("lobby is currently empty")

	// ErrGameEnded gives error message when the game has already ended
	ErrGameEnded = errors.New("game has already end")
)

// MigrateQuestions sends the questions.json to the redis server
func MigrateQuestions(client *redis.Client, path string) error {
	data, err := ioutil.ReadFile(path)
	if err != nil {
		return err
	}

	type AutoGenerated struct {
		Questions []struct {
			Statement string   `json:"statement"`
			Answer    string   `json:"answer"`
			Choices   []string `json:"choices"`
		} `json:"questions"`
	}
	var ag AutoGenerated
	if err := json.Unmarshal(data, &ag); err != nil {
		return err
	}

	if client == nil {
		return ErrNilClient
	}
	for _, q := range ag.Questions {
		err := NewQuestion(q.Statement, q.Answer, q.Choices)
		if err != nil {
			switch err {
			case ErrQuestionDuplicate:
				continue
			}
			return err
		}
	}

	return nil
}
